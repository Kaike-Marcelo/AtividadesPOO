/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.ifba.view;

import com.ifba.controller.BO.PessoaBO;
import com.ifba.model.entity.PessoaModel;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Kaike Marcelo
 */
public class TelaGerenciamentoPessoasMDI extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaGerenciamentoPessoasMDI
     */
    public TelaGerenciamentoPessoasMDI() {
        initComponents();
        
        setBorder(null);
        ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI()).setNorthPane(null);
        
        atualizarTabela();
    }
    
    public void atualizarTabela() {
        DefaultTableModel modeltable = (DefaultTableModel) TabelaPessoa.getModel();

        TabelaPessoa.setRowSorter(new TableRowSorter(modeltable));
        preencherTable();
    }
    
    public void preencherTable(){
        DefaultTableModel modeltable = (DefaultTableModel) TabelaPessoa.getModel();
        
        modeltable.setNumRows(0);
        
        PessoaBO pessoaBo = new PessoaBO();
        
        for (PessoaModel pessoaM : pessoaBo.consulta()){
           
            modeltable.addRow(new Object[]  {
                pessoaM.getId(), pessoaM.getNome(), pessoaM.getEmail()            
            } );
                    
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        DeletarBtn = new javax.swing.JButton();
        AtualizarBtn = new javax.swing.JButton();
        CadastrarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaPessoa = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");
        jPanel1.setFocusable(false);
        jPanel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 200));
        jPanel1.setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(117, 11, 171));
        jLabel1.setText("Gerenciamento de Pessoas");

        DeletarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        DeletarBtn.setPreferredSize(new java.awt.Dimension(50, 35));
        DeletarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletarBtnActionPerformed(evt);
            }
        });

        AtualizarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/arrow_refresh.png"))); // NOI18N
        AtualizarBtn.setPreferredSize(new java.awt.Dimension(50, 35));
        AtualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarBtnActionPerformed(evt);
            }
        });

        CadastrarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/add.png"))); // NOI18N
        CadastrarBtn.setActionCommand("Adici");
        CadastrarBtn.setPreferredSize(new java.awt.Dimension(50, 35));
        CadastrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarBtnActionPerformed(evt);
            }
        });

        TabelaPessoa.setBackground(new java.awt.Color(255, 255, 255));
        TabelaPessoa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 153)));
        TabelaPessoa.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        TabelaPessoa.setForeground(new java.awt.Color(0, 0, 0));
        TabelaPessoa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÓDIGO", "NOME", "EMAIL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TabelaPessoa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TabelaPessoa.setMaximumSize(new java.awt.Dimension(2147483647, 300));
        TabelaPessoa.setMinimumSize(new java.awt.Dimension(32, 300));
        TabelaPessoa.setRowHeight(25);
        TabelaPessoa.setSelectionBackground(new java.awt.Color(153, 0, 153));
        TabelaPessoa.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(TabelaPessoa);
        if (TabelaPessoa.getColumnModel().getColumnCount() > 0) {
            TabelaPessoa.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                        .addGap(53, 53, 53)
                        .addComponent(CadastrarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AtualizarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DeletarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(59, 59, 59))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addGap(52, 52, 52))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AtualizarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DeletarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CadastrarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.getAccessibleContext().setAccessibleName("");
        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CadastrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarBtnActionPerformed
        this.dispose();
        
        TelaCadastrarPessoaSDI telaCadastroPessoa = new TelaCadastrarPessoaSDI();
        telaCadastroPessoa.setVisible(true);
        
    }//GEN-LAST:event_CadastrarBtnActionPerformed

    private void AtualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarBtnActionPerformed
        
        int linhaSelecionada = TabelaPessoa.getSelectedRow();
        if (linhaSelecionada != -1) {
            
            this.dispose();
            
            int numCols = TabelaPessoa.getColumnCount();
            
            List <PessoaModel> dadosDeUmaPessoa = new ArrayList<>();
            PessoaModel pessoa = new PessoaModel();
            
            for (int col=0; col<numCols; col++) {
                
                Object valorDaCelula = TabelaPessoa.getModel().getValueAt(linhaSelecionada, col);
                
                switch (col) {
                    case 0:
                        pessoa.setId((Integer) valorDaCelula);
                        break;
                    case 1:
                        pessoa.setNome((String) valorDaCelula);
                        break;
                    case 2: 
                        pessoa.setEmail((String) valorDaCelula);
                        break;
                    default:
                        throw new AssertionError();
                }
            }
            
            dadosDeUmaPessoa.add(pessoa);
            
            TelaAtualizarPessoaSDI telaAtualizarPessoa = new TelaAtualizarPessoaSDI();
            telaAtualizarPessoa.preencherCampos(dadosDeUmaPessoa);
            
            telaAtualizarPessoa.setVisible(true);
        
        } else {
            JOptionPane.showMessageDialog(rootPane, "É necessário selecionar um ítem na tabela para poder atualizar.");
        }
    }//GEN-LAST:event_AtualizarBtnActionPerformed

    private void DeletarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletarBtnActionPerformed
       
        int linhaSelecionada = TabelaPessoa.getSelectedRow();
        
        if (linhaSelecionada != -1) {
            
            int opcao = JOptionPane.showConfirmDialog(rootPane, "Tem certeza de que deseja Excluir esse dado?", 
                                                      "Confirme ação!", 
                                                      JOptionPane.YES_NO_OPTION);
            
            if (opcao == JOptionPane.YES_NO_OPTION) {
                
                Object valorDaCelula = TabelaPessoa.getModel().getValueAt(linhaSelecionada, 0);
                Integer idNaCelula = (Integer) valorDaCelula;

                PessoaModel pessoaM = new PessoaModel();
                pessoaM.setId(idNaCelula);

                PessoaBO pessoaBo = new PessoaBO();
                boolean confirmarAcao = pessoaBo.excluir(pessoaM);

                if (confirmarAcao) {
                    JOptionPane.showMessageDialog(rootPane, "Sucesso! Ítem excluído");
                    atualizarTabela();

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Erro! Algo deu errado durante a exclusão.");
                }
            }
            
        } else {
            JOptionPane.showMessageDialog(rootPane, "É necessário selecionar um ítem na tabela para poder excluir.");
        }
        
    }//GEN-LAST:event_DeletarBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AtualizarBtn;
    private javax.swing.JButton CadastrarBtn;
    private javax.swing.JButton DeletarBtn;
    private javax.swing.JTable TabelaPessoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
